@startuml kisaragi

class Kisaragi {
    - private TimerSignal _TimerSignal { get; set; } = new TimerSignal(1000);
    + public Helpers Helpers { get; set; } = new Helpers();
    - private SettingJson _Json { get; set; } = new SettingJson();
    - private VersionWindow _Version { get; set; }
    - private bool _isSubscribed

    + public Kisaragi()
    - private async void Form1_Load(object sender, EventArgs e)
    - private void Form1_FormClosing(object sender, EventArgs e)
    - private void _SettingNotifyProperties(Utils<int> e)
    - private async Task _SettingKisaragiTasktrayAsync()
    - private async void _IsMonitoringTimeChanged(object sender, Utils<int> e)
}

class TimerSignal {
    + public SettingJson Setting { get; set; } = new SettingJson();
    - private System.Timers.Timer _Polling { get; set; }
    + public int elapsedTime;
    - private int _interval;
    + public event EventHandler<Utils<int>> MonitoringTimeChanged;
    + public TimerSignal(int interval)
    + public async Task InvokingTimerSignalEventIgnitionAsync()
}

class Helper {
    - private static readonly string _AliasName = "MediaFile";
    - private static extern int mciSendString(string command, StringBuilder buffer, int bufferSize, IntPtr hwndCallback);
    + public Helpers()
    + public async Task _PlayingVoiceAsync(string fileName)
    + public async Task _StoppedVoiceAsync()
}

class Utils {
    + public Utils(T args)
    + public T Args { get; private set; }
}

class SettingJson {
    - private static readonly string _DefaultFilePath;
    + public async Task CreateVoiceSettingFileAsync()
    + public async Task LoadSettingFileAsync()
}

class KisaragiMessageBox {
    - private System.Threading.Timer _timer;
    - private string _caption;
    - private bool _disposed = false;
    - private SafeHandle _handle { get; set; } = new SafeFileHandle(IntPtr.Zero, true);
    + public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
    + public static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);
    + public KisaragiMessageBox(string text, string caption, int timeout)
    - private void _OnTimerElapsed(object state)
    + public void Dispose()
    # protected virtual void Dispose(bool disposing)
}

class VersionWindow {
    + public VersionWindow()
    - private void VersionWindow_Load(object sender, EventArgs e)
}

interface IKisaragi {
    + event EventHandler<Utils<int>> MonitoringTimeChanged;
}

Kisaragi <|-- Form
Kisaragi ..> SettingJson
Kisaragi ..> Helper
Kisaragi ..> Utils
Kisaragi ..> KisaragiMessageBox
Kisaragi ..> VersionWindow
TimerSignal ..> Utils
TimerSignal ..> Kisaragi
TimerSignal <.. Kisaragi
TimerSignal <|-- IKisaragi
Utils <|-- EventArgs
VersionWindow <|-- Form

@enduml